/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { ChildProcessByStdio } from 'child_process';
import { Readable, Writable } from 'node:stream';
import { inspect } from 'node:util';
import { Context, Options } from './context.js';
export interface Zx extends Options {
    (pieces: TemplateStringsArray, ...args: any[]): ProcessPromise;
}
export declare const $: Zx;
export declare class ProcessPromise extends Promise<ProcessOutput> {
    child?: ChildProcessByStdio<Writable, Readable, Readable>;
    _resolved: boolean;
    _inheritStdin: boolean;
    _piped: boolean;
    _prerun: any;
    _postrun: any;
    readonly ctx: Context;
    constructor(cb: (resolve: Function, reject?: Function) => void);
    get stdin(): Writable;
    get stdout(): Readable;
    get stderr(): Readable;
    get exitCode(): Promise<any>;
    pipe(dest: Writable | ProcessPromise | string): ProcessPromise;
    kill(signal?: string): Promise<void>;
    _run(): void;
}
export declare class ProcessOutput extends Error {
    #private;
    constructor({ code, signal, stdout, stderr, combined, message, }: {
        code: number | null;
        signal: NodeJS.Signals | null;
        stdout: string;
        stderr: string;
        combined: string;
        message: string;
    });
    toString(): string;
    get stdout(): string;
    get stderr(): string;
    get exitCode(): number | null;
    get signal(): NodeJS.Signals | null;
    [inspect.custom](): string;
}
