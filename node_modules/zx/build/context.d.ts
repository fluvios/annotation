/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { spawn } from 'node:child_process';
export interface Options {
    verbose: boolean | number;
    cwd: string;
    env: NodeJS.ProcessEnv;
    prefix: string;
    shell: string | boolean;
    maxBuffer: number;
    quote: (v: string) => string;
    spawn: typeof spawn;
    logOutput?: 'stdout' | 'stderr';
    logFormat?: (...msg: any[]) => string | string[];
    logPrint?: (data: any, err?: any) => void;
    logIgnore?: string | string[];
}
export interface Context extends Options {
    nothrow?: boolean;
    cmd: string;
    __from: string;
    resolve: any;
    reject: any;
}
export declare function getCtx(): Context;
export declare function setRootCtx(ctx: Options): void;
export declare function getRootCtx(): Options;
export declare const runInCtx: <R, TArgs extends any[]>(ctx: Options | undefined, cb: (...args: TArgs) => R, ...args: TArgs) => R;
